const { argv } = require('yargs');
const bytediff = require('gulp-bytediff');
const chalk = require('chalk');
const cheerio = require('cheerio');
const del = require('del');
const fs = require('fs');
const genversion = require('genversion');
const gulp = require('gulp');
const htmlmin = require('gulp-htmlmin');
const modifyFile = require('gulp-modify-file');
const pkg = require('./package.json');
const pug = require('gulp-pug');
const rename = require('gulp-rename');
const webpack = require('webpack');
const webpackConfig = require('./webpack.config.js');

//- gulp --production | -p initiates webpack's production version (no source maps, minified JS)
const production = !!argv.production || !!argv.p;

/**
 * Compile JavaScript with Webpack
 * @param {function} done 
 */
function js(done) {
  // copy version number from package.json to code
  genversion.generate('src/version.ts', (err, version) => {
    if (err)
      throw (err);
    else
      console.log(`Synced package.json version: ${version}`);
  });

  if (production) {
    webpackConfig.mode = 'production';
    webpackConfig.devtool = '';
    console.log(chalk.inverse.cyan('--- Production version in progress ---'));
  } else {
    webpackConfig.mode = 'development';
    webpackConfig.devtool = 'eval-source-map';
  }

  webpack(webpackConfig, function (err, stats) {
    if (err) throw new Error('webpack', err);
    console.log('[webpack]', stats.toString({}));
    done();
  });
};

/**
 * Generate Pug Templates
 */
function templates() {
  //const jsFolder = (production ? 'https://static.twoday.net/cdn/files/' : './');
  const jsFolder = './';
  const pkgVersion = pkg.version;
  return gulp.src(['./src/jade/*.pug', './test/testpage*.pug'])
    .pipe(pug({
      locals: { jsFolder, pkgVersion },
      pretty: true,
      verbose: true
    }))
    .pipe(gulp.dest('./dist/'))
};

/**
 * Minify generated HTML
 */
function minify() {
  return gulp.src(['./dist/teststory.html', './dist/testtool.html'])
    .pipe(bytediff.start())
    .pipe(htmlmin({
      collapseWhitespace: true,
      decodeEntities: false,
      ignoreCustomFragments: [/&amp;lt;%[\s\S]*?%&amp;gt;/, /&lt;[\s\S]*?&gt;/],
      includeAutoGeneratedTags: false,
      keepClosingSlash: true
    }))
    .pipe(modifyFile(function (content, path, file) {
      const $ = cheerio.load(content, { decodeEntities: false });
      const providerDocumentation = $('#providerDocumentation').html();
      if (providerDocumentation) {
        const len = providerDocumentation.length;
        if (len) {
          fs.writeFileSync('./dist/videoload2-extract.html', providerDocumentation, 'utf8');
          console.log(chalk.blue('Extracted provider documentation: ' + len + ' bytes to separate file.'));
          $('#providerDocumentation').html('Einen Moment bitte, die Dokumentation wird geladen...');
        }
      }
      return $('.storyContent').html();
    }))
    .pipe(bytediff.stop(function (data) {
      const difference = '% ' + (data.savings > 0 ? 'smaller.' : 'larger.');
      return data.fileName + ', was: ' + data.startSize + ', now: ' + data.endSize + ' (=' + (data.endSize / 1024).toFixed(1) + ' kb), ' +
        (100 - data.percent * 100).toFixed(2) + difference;
    }))
    .pipe(rename(function (path) {
      path.basename = path.basename.replace('test', 'videoload2-');
    }))
    .pipe(gulp.dest('dist'));
};

/**
 * Copy bundled entry files to Dropbox
 */
function dropbox() {

  const targetDir = 'D:/Dokumente/Dropbox/Public/js/videoload2/';
  const keys = Object.keys(webpackConfig.entry);

  // rename posturl.html to .xml
  gulp.src('./dist/posturl.html')
    .pipe(rename('posturl.xml'))
    .pipe(gulp.dest('./dist'));
  del('./dist/posturl.html');
  let entries = ['./dist/posturl.xml'];

  if (production) del(['./dist/*.map']);

  for (let i = 0, len = keys.length; i < len; i++) {
    let name = './dist/' + keys[i];
    entries.push(name + '.js');
    if (!production) entries.push(name + '.js.map', './dist/test*.html');
  }

  return gulp.src(entries).pipe(gulp.dest(targetDir));

};

function copy() {
  const targetDir = 'D:/Dokumente/GitHub/blog/static/js';
  return gulp.src(['./dist/videoload2.js']).pipe(gulp.dest(targetDir));
}

const generate = gulp.parallel(gulp.series(templates, minify), js);
const deploy = gulp.series(generate, dropbox);

gulp.task('default', generate);
gulp.task('deploy', deploy);
gulp.task('copy', copy);